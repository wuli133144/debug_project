Index: apps/speed.c
===================================================================
--- apps/speed.c	(revision 14345)
+++ apps/speed.c	(working copy)
@@ -140,6 +140,9 @@
 #ifndef OPENSSL_NO_MD5
 #include <openssl/md5.h>
 #endif
+#ifndef OPENSSL_NO_SM3
+#include <openssl/sm3.h>
+#endif
 #ifndef OPENSSL_NO_HMAC
 #include <openssl/hmac.h>
 #endif
@@ -242,7 +245,7 @@
 static int do_multi(int multi);
 #endif
 
-#define ALGOR_NUM	31
+#define ALGOR_NUM	32
 #define SIZE_NUM	5
 #define RSA_NUM		4
 #define DSA_NUM		3
@@ -257,7 +260,8 @@
   "aes-128 cbc","aes-192 cbc","aes-256 cbc",
   "camellia-128 cbc","camellia-192 cbc","camellia-256 cbc",
   "evp","sha256","sha512","whirlpool",
-  "aes-128 ige","aes-192 ige","aes-256 ige","ghash","sm1-128 cbc"};
+  "aes-128 ige","aes-192 ige","aes-256 ige","ghash","sm1-128 cbc",
+  "sm3"};
 static double results[ALGOR_NUM][SIZE_NUM];
 static int lengths[SIZE_NUM]={16,64,256,1024,8*1024};
 #ifndef OPENSSL_NO_RSA
@@ -389,6 +393,9 @@
 	unsigned char md5[MD5_DIGEST_LENGTH];
 	unsigned char hmac[MD5_DIGEST_LENGTH];
 #endif
+#ifndef OPENSSL_NO_SM3
+	unsigned char sm3[SM3_DIGEST_LENGTH];
+#endif
 #ifndef OPENSSL_NO_SHA
 	unsigned char sha[SHA_DIGEST_LENGTH];
 #ifndef OPENSSL_NO_SHA256
@@ -505,6 +512,8 @@
 #define D_IGE_256_AES   28
 #define D_GHASH		29
 #define D_CBC_128_SM1  30
+#define D_SM3		31
+
 	double d=0.0;
 	long c[ALGOR_NUM][SIZE_NUM];
 #define	R_DSA_512	0
@@ -805,6 +814,10 @@
 			if (strcmp(*argv,"hmac") == 0) doit[D_HMAC]=1;
 		else
 #endif
+#ifndef OPENSSL_NO_SM3
+			if (strcmp(*argv,"SM3") == 0) doit[D_SM3]=1;
+		else
+#endif
 #ifndef OPENSSL_NO_SHA
 			if (strcmp(*argv,"sha1") == 0) doit[D_SHA1]=1;
 		else
@@ -1013,9 +1026,13 @@
 		else
 #endif
 #ifndef OPENSSL_NO_SM1
-                       if (strcmp(*argv,"sm1-128-cbc") == 0) doit[D_CBC_128_SM1]=1;
-                else
+			if (strcmp(*argv,"sm1-128-cbc") == 0) doit[D_CBC_128_SM1]=1;
+		else
 #endif
+#ifndef OPENSSL_NO_SM3
+			if (strcmp(*argv,"sm3") == 0) doit[D_SM3]=1;
+		else
+#endif 
 			{
 			BIO_printf(bio_err,"Error: bad option or value\n");
 			BIO_printf(bio_err,"\n");
@@ -1035,6 +1052,9 @@
 			BIO_printf(bio_err,"hmac     ");
 #endif
 #endif
+#ifndef OPENSSL_NO_SM3
+			BIO_printf(bio_err,"sm3      ");
+#endif
 #ifndef OPENSSL_NO_SHA1
 			BIO_printf(bio_err,"sha1     ");
 #endif
@@ -1602,6 +1622,22 @@
 		HMAC_CTX_cleanup(&hctx);
 		}
 #endif
+
+#ifndef OPENSSL_NO_SM3
+	if (doit[D_SM3])
+		{
+		for (j=0; j<SIZE_NUM; j++)
+			{
+			print_message(names[D_SM3],c[D_SM3][j],lengths[j]);
+			Time_F(START);
+			for (count=0,run=1; COND(c[D_SM3][j]); count++)
+				EVP_Digest(&(buf[0]),(unsigned long)lengths[j],&(sm3[0]),NULL,EVP_get_digestbyname("sm3"),NULL);
+			d=Time_F(STOP);
+			print_result(D_SM3,j,count,d);
+			}
+		}
+#endif
+
 #ifndef OPENSSL_NO_SHA
 	if (doit[D_SHA1])
 		{
Index: apps/progs.h
===================================================================
--- apps/progs.h	(revision 14345)
+++ apps/progs.h	(working copy)
@@ -172,6 +172,9 @@
 #ifndef OPENSSL_NO_RMD160
 	{FUNC_TYPE_MD,"rmd160",dgst_main},
 #endif
+#ifndef OPENSSL_NO_MD5
+	{FUNC_TYPE_MD,"sm3",dgst_main},
+#endif
 #ifndef OPENSSL_NO_SM1
 	{FUNC_TYPE_CIPHER,"sm1-128-cbc",enc_main},
 #endif
Index: Makefile.compile
===================================================================
--- Makefile.compile	(revision 14345)
+++ Makefile.compile	(working copy)
@@ -155,7 +155,7 @@
 	bn ec rsa dsa ecdsa dh ecdh dso engine \
 	buffer bio stack lhash rand err \
 	evp asn1 pem x509 x509v3 conf txt_db pkcs7 pkcs12 comp ocsp ui krb5 \
-	cms pqueue ts srp cmac sm1
+	cms pqueue ts srp cmac sm1 sm3
 # keep in mind that the above list is adjusted by ./Configure
 # according to no-xxx arguments...
 
Index: crypto/objects/obj_mac.num
===================================================================
--- crypto/objects/obj_mac.num	(revision 14345)
+++ crypto/objects/obj_mac.num	(working copy)
@@ -920,3 +920,5 @@
 ISO_CN		920
 CN_GMJ		921
 sm1_128_cbc		922
+sm3		923
+sm3WithRSAEncryption		924
Index: crypto/objects/objects.txt
===================================================================
--- crypto/objects/objects.txt	(revision 14345)
+++ crypto/objects/objects.txt	(working copy)
@@ -851,6 +851,8 @@
 # GMJ Algorithms
 !Alias gm-alg	CN-GMJ 1
 gm-alg 102	: SM1-128-CBC	: sm1-128-cbc
+gm-alg 401	: SM3	: sm3
+gm-alg 504	: RSA-SM3	: sm3WithRSAEncryption
 
 # AES aka Rijndael
 
Index: crypto/evp/Makefile
===================================================================
--- crypto/evp/Makefile	(revision 14345)
+++ crypto/evp/Makefile	(working copy)
@@ -29,7 +29,7 @@
 	c_all.c c_allc.c c_alld.c evp_lib.c bio_ok.c \
 	evp_pkey.c evp_pbe.c p5_crpt.c p5_crpt2.c \
 	e_old.c pmeth_lib.c pmeth_fn.c pmeth_gn.c m_sigver.c evp_fips.c	\
-	e_aes_cbc_hmac_sha1.c e_rc4_hmac_md5.c e_sm1.c
+	e_aes_cbc_hmac_sha1.c e_rc4_hmac_md5.c e_sm1.c m_sm3.c
 
 LIBOBJ=	encode.o digest.o evp_enc.o evp_key.o evp_acnf.o evp_cnf.o \
 	e_des.o e_bf.o e_idea.o e_des3.o e_camellia.o\
@@ -42,7 +42,7 @@
 	c_all.o c_allc.o c_alld.o evp_lib.o bio_ok.o \
 	evp_pkey.o evp_pbe.o p5_crpt.o p5_crpt2.o \
 	e_old.o pmeth_lib.o pmeth_fn.o pmeth_gn.o m_sigver.o evp_fips.o \
-	e_aes_cbc_hmac_sha1.o e_rc4_hmac_md5.o e_sm1.o
+	e_aes_cbc_hmac_sha1.o e_rc4_hmac_md5.o e_sm1.o m_sm3.o
 
 SRC= $(LIBSRC)
 
@@ -774,13 +774,26 @@
 pmeth_lib.o: ../../include/openssl/symhacks.h ../../include/openssl/x509.h
 pmeth_lib.o: ../../include/openssl/x509_vfy.h ../asn1/asn1_locl.h ../cryptlib.h
 pmeth_lib.o: evp_locl.h pmeth_lib.c
-e_aes.o: ../../include/openssl/sm1.h ../../include/openssl/asn1.h
-e_aes.o: ../../include/openssl/bio.h ../../include/openssl/crypto.h
-e_aes.o: ../../include/openssl/e_os2.h ../../include/openssl/err.h
-e_aes.o: ../../include/openssl/evp.h ../../include/openssl/lhash.h
-e_aes.o: ../../include/openssl/modes.h ../../include/openssl/obj_mac.h
-e_aes.o: ../../include/openssl/objects.h ../../include/openssl/opensslconf.h
-e_aes.o: ../../include/openssl/opensslv.h ../../include/openssl/ossl_typ.h
-e_aes.o: ../../include/openssl/rand.h ../../include/openssl/safestack.h
-e_aes.o: ../../include/openssl/stack.h ../../include/openssl/symhacks.h
-e_aes.o: ../modes/modes_lcl.h e_sm1.c evp_locl.h
+e_sm1.o: ../../include/openssl/sm1.h ../../include/openssl/asn1.h
+e_sm1.o: ../../include/openssl/bio.h ../../include/openssl/crypto.h
+e_sm1.o: ../../include/openssl/e_os2.h ../../include/openssl/err.h
+e_sm1.o: ../../include/openssl/evp.h ../../include/openssl/lhash.h
+e_sm1.o: ../../include/openssl/modes.h ../../include/openssl/obj_mac.h
+e_sm1.o: ../../include/openssl/objects.h ../../include/openssl/opensslconf.h
+e_sm1.o: ../../include/openssl/opensslv.h ../../include/openssl/ossl_typ.h
+e_sm1.o: ../../include/openssl/rand.h ../../include/openssl/safestack.h
+e_sm1.o: ../../include/openssl/stack.h ../../include/openssl/symhacks.h
+e_sm1.o: ../modes/modes_lcl.h e_sm1.c evp_locl.h
+m_sm3.o: ../../e_os.h ../../include/openssl/asn1.h ../../include/openssl/bio.h
+m_sm3.o: ../../include/openssl/buffer.h ../../include/openssl/crypto.h
+m_sm3.o: ../../include/openssl/e_os2.h ../../include/openssl/ec.h
+m_sm3.o: ../../include/openssl/ecdh.h ../../include/openssl/ecdsa.h
+m_sm3.o: ../../include/openssl/err.h ../../include/openssl/evp.h
+m_sm3.o: ../../include/openssl/lhash.h ../../include/openssl/sm3.h
+m_sm3.o: ../../include/openssl/obj_mac.h ../../include/openssl/objects.h
+m_sm3.o: ../../include/openssl/opensslconf.h ../../include/openssl/opensslv.h
+m_sm3.o: ../../include/openssl/ossl_typ.h ../../include/openssl/pkcs7.h
+m_sm3.o: ../../include/openssl/rsa.h ../../include/openssl/safestack.h
+m_sm3.o: ../../include/openssl/sha.h ../../include/openssl/stack.h
+m_sm3.o: ../../include/openssl/symhacks.h ../../include/openssl/x509.h
+m_sm3.o: ../../include/openssl/x509_vfy.h ../cryptlib.h evp_locl.h m_sm3.c
Index: crypto/evp/c_alld.c
===================================================================
--- crypto/evp/c_alld.c	(revision 14345)
+++ crypto/evp/c_alld.c	(working copy)
@@ -111,4 +111,7 @@
 #ifndef OPENSSL_NO_WHIRLPOOL
 	EVP_add_digest(EVP_whirlpool());
 #endif
+#ifndef OPENSSL_NO_SM3
+	EVP_add_digest(EVP_sm3());
+#endif
 	}
Index: crypto/evp/evp.h
===================================================================
--- crypto/evp/evp.h	(revision 14345)
+++ crypto/evp/evp.h	(working copy)
@@ -853,6 +853,10 @@
 const EVP_CIPHER *EVP_sm1_128_cbc(void);
 #endif
 
+#ifndef OPENSSL_NO_SM3
+const EVP_MD *EVP_sm3(void);
+#endif
+
 void OPENSSL_add_all_algorithms_noconf(void);
 void OPENSSL_add_all_algorithms_conf(void);
 
Index: crypto/evp/m_sm3.c
===================================================================
--- crypto/evp/m_sm3.c	(revision 0)
+++ crypto/evp/m_sm3.c	(revision 0)
@@ -0,0 +1,46 @@
+/* crypto/evp/m_sm3.c */
+
+#include <stdio.h>
+#include "cryptlib.h"
+
+#ifndef OPENSSL_NO_SM3
+
+#include <openssl/evp.h>
+#include <openssl/objects.h>
+#include <openssl/x509.h>
+#include <openssl/sm3.h>
+#ifndef OPENSSL_NO_RSA
+#include <openssl/rsa.h>
+#endif
+#include "evp_locl.h"
+
+static int init(EVP_MD_CTX *ctx)
+	{ return SM3_Init(ctx->md_data); }
+
+static int update(EVP_MD_CTX *ctx,const void *data,size_t count)
+	{ return SM3_Update(ctx->md_data,data,count); }
+
+static int final(EVP_MD_CTX *ctx,unsigned char *md)
+	{ return SM3_Final(md,ctx->md_data); }
+
+static const EVP_MD sm3_md=
+	{
+	NID_sm3,
+	NID_sm3WithRSAEncryption,
+	SM3_DIGEST_LENGTH,
+	0,
+	init,
+	update,
+	final,
+	NULL,
+	NULL,
+	EVP_PKEY_RSA_method,
+	SM3_CBLOCK,
+	sizeof(EVP_MD *)+sizeof(SM3_CTX),
+	};
+
+const EVP_MD *EVP_sm3(void)
+	{
+	return(&sm3_md);
+	}
+#endif
Index: crypto/sm3/sm3_locl.h
===================================================================
--- crypto/sm3/sm3_locl.h	(revision 0)
+++ crypto/sm3/sm3_locl.h	(revision 0)
@@ -0,0 +1,6 @@
+/* crypto/sm3/sm3_locl.h */
+
+#include <stdlib.h>
+#include <string.h>
+#include <openssl/e_os2.h>
+#include <openssl/sm3.h>
Index: crypto/sm3/sm3test.c
===================================================================
--- crypto/sm3/sm3test.c	(revision 0)
+++ crypto/sm3/sm3test.c	(revision 0)
@@ -0,0 +1,74 @@
+/* crypto/sm3/sm3test.c */
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+#include "../e_os.h"
+
+#ifdef OPENSSL_NO_SM3
+int main(int argc, char *argv[])
+{
+    printf("No SM3 support\n");
+    return(0);
+}
+#else
+#include <openssl/evp.h>
+#include <openssl/sm3.h>
+
+static char *test[]={
+	"abc",
+	"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",
+	NULL,
+	};
+
+static char *ret[]={
+	"66c7f0f462eeedd9d1f2d46bdc10e4e24167c4875cf2f7a2297da02b8f4ba8e0",
+	"debe9ff92275b8a138604889c18e5a4d6fdb70e5387e5765293dcba39c0c5732",
+	};
+
+static char *pt(unsigned char *md);
+int main(int argc, char *argv[])
+	{
+	int i,err=0;
+	char **P,**R;
+	char *p;
+	unsigned char md[SM3_DIGEST_LENGTH];
+
+	P=test;
+	R=ret;
+	i=1;
+	while (*P != NULL)
+		{
+		EVP_Digest(&(P[0][0]),strlen((char *)*P),md,NULL,EVP_sm3(), NULL);
+		p=pt(md);
+		if (strcmp(p,(char *)*R) != 0)
+			{
+			printf("error calculating SM3 on '%s'\n",*P);
+			printf("got %s instead of %s\n",p,*R);
+			err++;
+			}
+		else
+			printf("test %d ok\n",i);
+		i++;
+		R++;
+		P++;
+		}
+
+#ifdef OPENSSL_SYS_NETWARE
+    if (err) printf("ERROR: %d\n", err);
+#endif
+	EXIT(err);
+	return(0);
+	}
+
+static char *pt(unsigned char *md)
+	{
+	int i;
+	static char buf[80];
+
+	for (i=0; i<SM3_DIGEST_LENGTH; i++)
+		sprintf(&(buf[i*2]),"%02x",md[i]);
+	return(buf);
+	}
+#endif
Index: crypto/sm3/sm3_soft.h
===================================================================
--- crypto/sm3/sm3_soft.h	(revision 0)
+++ crypto/sm3/sm3_soft.h	(revision 0)
@@ -0,0 +1,15 @@
+#ifndef SM3_SOFT_H
+#define SM3_SOFT_H
+
+typedef struct
+{
+	unsigned int total[2];     /*!< number of bytes processed  */
+	unsigned int state[8];     /*!< intermediate digest state  */
+	unsigned char buffer[64];   /*!< data block being processed */
+} sm3_context;
+
+void sm3_soft_init( sm3_context *ctx );
+void sm3_soft_update( sm3_context *ctx, const unsigned char *input, int ilen );
+void sm3_soft_final( sm3_context *ctx, unsigned char* output);
+
+#endif
Index: crypto/sm3/sm3_dgst.c
===================================================================
--- crypto/sm3/sm3_dgst.c	(revision 0)
+++ crypto/sm3/sm3_dgst.c	(revision 0)
@@ -0,0 +1,39 @@
+/* crypto/sm3/sm3_dgst.c */
+
+#include <stdio.h>
+#include "sm3_locl.h"
+#include <openssl/opensslv.h>
+#include <openssl/crypto.h>
+
+#define OPENSSL_SM3_SOFT
+
+#ifdef OPENSSL_SM3_SOFT
+#include "sm3_soft.h"
+#endif
+
+int SM3_Init(SM3_CTX *c)
+{
+	int err = 1;
+#ifdef OPENSSL_SM3_SOFT
+	sm3_soft_init((sm3_context *)c->priv);
+#endif
+	return err;
+}
+
+int SM3_Update(SM3_CTX *c, const void *data, size_t len)
+{
+	int err = 1;
+#ifdef OPENSSL_SM3_SOFT
+	sm3_soft_update((sm3_context *)c->priv, data, len);
+#endif
+	return err;
+}
+
+int SM3_Final(unsigned char *md, SM3_CTX *c)
+{
+	int err = 1;
+#ifdef OPENSSL_SM3_SOFT
+	sm3_soft_final((sm3_context *)c->priv, md);
+#endif
+	return err;
+}
Index: crypto/sm3/sm3_one.c
===================================================================
--- crypto/sm3/sm3_one.c	(revision 0)
+++ crypto/sm3/sm3_one.c	(revision 0)
@@ -0,0 +1,21 @@
+/* crypto/sm3/sm3_one.c */
+
+#include <stdio.h>
+#include <string.h>
+#include <openssl/sm3.h>
+#include <openssl/crypto.h>
+
+unsigned char *SM3(const unsigned char *d, size_t n, unsigned char *md)
+{
+	SM3_CTX c;
+	static unsigned char m[SM3_DIGEST_LENGTH];
+
+	if (md == NULL) md = m;
+	if (!SM3_Init(&c))
+		return NULL;
+	SM3_Update(&c,d,n);
+	SM3_Final(md,&c);
+	OPENSSL_cleanse(&c,sizeof(c)); /* security consideration */
+	return(md);
+}
+
Index: crypto/sm3/sm3.h
===================================================================
--- crypto/sm3/sm3.h	(revision 0)
+++ crypto/sm3/sm3.h	(revision 0)
@@ -0,0 +1,33 @@
+/* crypto/sm3/sm3.h */
+
+#ifndef HEADER_SM3_H
+#define HEADER_SM3_H
+
+#include <openssl/e_os2.h>
+#include <stddef.h>
+
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
+#ifdef OPENSSL_NO_SM3
+#error SM3 is disabled.
+#endif
+
+#define SM3_LONG unsigned long
+#define SM3_DIGEST_LENGTH 32
+
+#define SM3_CBLOCK	64
+#define SM3_PRIV_ST_LEN	256
+
+typedef struct SM3state_st
+{
+	unsigned char priv[SM3_PRIV_ST_LEN];
+} SM3_CTX;
+
+int SM3_Init(SM3_CTX *c);
+int SM3_Update(SM3_CTX *c, const void *data, size_t len);
+int SM3_Final(unsigned char *md, SM3_CTX *c);
+unsigned char *SM3(const unsigned char *d, size_t n, unsigned char *md);
+
+#endif
Index: crypto/sm3/Makefile
===================================================================
--- crypto/sm3/Makefile	(revision 0)
+++ crypto/sm3/Makefile	(revision 0)
@@ -0,0 +1,93 @@
+#
+# OpenSSL/crypto/sm3/Makefile
+#
+
+DIR=    sm3
+TOP=    ../..
+CC=     cc
+CPP=    $(CC) -E
+INCLUDES=-I.. -I$(TOP) -I../../include
+CFLAG=-g
+MAKEFILE=       Makefile
+AR=             ar r
+
+SM3_ASM_OBJ=
+
+CFLAGS= $(INCLUDES) $(CFLAG)
+ASFLAGS= $(INCLUDES) $(ASFLAG)
+AFLAGS= $(ASFLAGS)
+
+GENERAL=Makefile
+TEST=sm3test.c
+APPS=
+
+LIB=$(TOP)/libsg_crypto.a
+LIBSRC=sm3_dgst.c sm3_one.c sm3_soft.c
+LIBOBJ=sm3_dgst.o sm3_one.o sm3_soft.o $(SM3_ASM_OBJ)
+
+SRC= $(LIBSRC)
+
+EXHEADER= sm3.h
+HEADER= sm3_locl.h sm3_soft.h $(EXHEADER)
+
+ALL=    $(GENERAL) $(SRC) $(HEADER)
+
+top:
+	(cd ../..; $(MAKE) DIRS=crypto SDIRS=$(DIR) sub_all)
+
+all:    lib
+
+lib:    $(LIBOBJ)
+	$(AR) $(LIB) $(LIBOBJ)
+	$(RANLIB) $(LIB) || echo Never mind.
+	@touch lib
+
+files:
+	$(PERL) $(TOP)/util/files.pl Makefile >> $(TOP)/MINFO
+
+links:
+	@$(PERL) $(TOP)/util/mklink.pl ../../include/openssl $(EXHEADER)
+	@$(PERL) $(TOP)/util/mklink.pl ../../test $(TEST)
+	@$(PERL) $(TOP)/util/mklink.pl ../../apps $(APPS)
+
+install:
+	@[ -n "$(INSTALLTOP)" ] # should be set by top Makefile...
+	@headerlist="$(EXHEADER)"; for i in $$headerlist ; \
+	do  \
+	(cp $$i $(INSTALL_PREFIX)$(INSTALLTOP)/include/openssl/$$i; \
+	chmod 644 $(INSTALL_PREFIX)$(INSTALLTOP)/include/openssl/$$i ); \
+	done;
+
+tags:
+	ctags $(SRC)
+
+tests:
+
+lint:
+	lint -DLINT $(INCLUDES) $(SRC)>fluff
+
+depend:
+	@[ -n "$(MAKEDEPEND)" ] # should be set by upper Makefile...
+	$(MAKEDEPEND) -- $(CFLAG) $(INCLUDES) $(DEPFLAG) -- $(PROGS) $(LIBSRC)
+
+dclean:
+	$(PERL) -pe 'if (/^# DO NOT DELETE THIS LINE/) {print; exit(0);}' $(MAKEFILE) >Makefile.new
+	mv -f Makefile.new $(MAKEFILE)
+
+clean:
+	rm -f *.s *.o *.obj lib tags core .pure .nfs* *.old *.bak fluff
+
+# DO NOT DELETE THIS LINE -- make depend depends on it.
+
+sm3_dgst.o: ../../include/openssl/crypto.h ../../include/openssl/e_os2.h
+sm3_dgst.o: ../../include/openssl/sm3.h ../../include/openssl/opensslconf.h
+sm3_dgst.o: ../../include/openssl/opensslv.h ../../include/openssl/ossl_typ.h
+sm3_dgst.o: ../../include/openssl/safestack.h ../../include/openssl/stack.h
+sm3_dgst.o: ../../include/openssl/symhacks.h ../md32_common.h sm3_dgst.c
+sm3_dgst.o: sm3_locl.h
+sm3_one.o: ../../include/openssl/crypto.h ../../include/openssl/e_os2.h
+sm3_one.o: ../../include/openssl/sm3.h ../../include/openssl/opensslconf.h
+sm3_one.o: ../../include/openssl/opensslv.h ../../include/openssl/ossl_typ.h
+sm3_one.o: ../../include/openssl/safestack.h ../../include/openssl/stack.h
+sm3_one.o: ../../include/openssl/symhacks.h sm3_one.c
+sm3_soft.o: sm3_soft.c sm3_soft.h
Index: crypto/sm3/sm3_soft.c
===================================================================
--- crypto/sm3/sm3_soft.c	(revision 0)
+++ crypto/sm3/sm3_soft.c	(revision 0)
@@ -0,0 +1,297 @@
+/* crypto/sm3/sm3_soft.c */
+
+#include <stdio.h>
+#include <openssl/opensslv.h>
+#include <openssl/crypto.h>
+#include "sm3_soft.h"
+
+#include <string.h>
+#include <stdio.h>
+
+/* FOR TEST PRINT */
+// #define TEST_PRINT
+
+/*
+ *  * 32-bit integer manipulation macros (big endian)
+ *   */
+#ifndef GET_ULONG_BE
+#define GET_ULONG_BE(n,b,i)                             \
+{                                                       \
+	(n) = ( (unsigned int) (b)[(i)    ] << 24 )        \
+	| ( (unsigned int) (b)[(i) + 1] << 16 )        \
+	| ( (unsigned int) (b)[(i) + 2] <<  8 )        \
+	| ( (unsigned int) (b)[(i) + 3]       );       \
+}
+#endif
+
+#ifndef PUT_ULONG_BE
+#define PUT_ULONG_BE(n,b,i)                             \
+{                                                       \
+	(b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
+	(b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
+	(b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
+	(b)[(i) + 3] = (unsigned char) ( (n)       );       \
+}
+#endif
+
+/*
+ *  * SM3 context setup
+ *   */
+void sm3_soft_init( sm3_context *ctx )
+{
+	ctx->total[0] = 0;
+	ctx->total[1] = 0;
+
+	ctx->state[0] = 0x7380166F;
+	ctx->state[1] = 0x4914B2B9;
+	ctx->state[2] = 0x172442D7;
+	ctx->state[3] = 0xDA8A0600;
+	ctx->state[4] = 0xA96F30BC;
+	ctx->state[5] = 0x163138AA;
+	ctx->state[6] = 0xE38DEE4D;
+	ctx->state[7] = 0xB0FB0E4E;
+
+}
+
+static void sm3_process( sm3_context *ctx, const unsigned char* data /* [64] */ )
+{
+	unsigned int SS1, SS2, TT1, TT2, W[68],W1[64];
+	unsigned int A, B, C, D, E, F, G, H;
+	unsigned int T[64];
+	unsigned int Temp1,Temp2,Temp3,Temp4,Temp5;
+	int j;
+#ifdef TEST_PRINT 
+	int i;
+#endif
+	for(j = 0; j < 16; j++)
+		T[j] = 0x79CC4519;
+	for(j =16; j < 64; j++)
+		T[j] = 0x7A879D8A;
+
+	GET_ULONG_BE( W[ 0], data,  0 );
+	GET_ULONG_BE( W[ 1], data,  4 );
+	GET_ULONG_BE( W[ 2], data,  8 );
+	GET_ULONG_BE( W[ 3], data, 12 );
+	GET_ULONG_BE( W[ 4], data, 16 );
+	GET_ULONG_BE( W[ 5], data, 20 );
+	GET_ULONG_BE( W[ 6], data, 24 );
+	GET_ULONG_BE( W[ 7], data, 28 );
+	GET_ULONG_BE( W[ 8], data, 32 );
+	GET_ULONG_BE( W[ 9], data, 36 );
+	GET_ULONG_BE( W[10], data, 40 );
+	GET_ULONG_BE( W[11], data, 44 );
+	GET_ULONG_BE( W[12], data, 48 );
+	GET_ULONG_BE( W[13], data, 52 );
+	GET_ULONG_BE( W[14], data, 56 );
+	GET_ULONG_BE( W[15], data, 60 );
+
+#ifdef TEST_PRINT 
+	printf("Message with padding:\n");
+	for(i=0; i< 8; i++)
+		printf("%08x ",W[i]);
+	printf("\n");
+	for(i=8; i< 16; i++)
+		printf("%08x ",W[i]);
+	printf("\n");
+#endif
+
+#define FF0(x,y,z) ( (x) ^ (y) ^ (z)) 
+#define FF1(x,y,z) (((x) & (y)) | ( (x) & (z)) | ( (y) & (z)))
+
+#define GG0(x,y,z) ( (x) ^ (y) ^ (z)) 
+#define GG1(x,y,z) (((x) & (y)) | ( (~(x)) & (z)) )
+
+
+#define  SHL(x,n) (((x) & 0xFFFFFFFF) << n)
+#define ROTL(x,n) (SHL((x),n) | ((x) >> (32 - n)))
+
+#define P0(x) ((x) ^  ROTL((x),9) ^ ROTL((x),17)) 
+#define P1(x) ((x) ^  ROTL((x),15) ^ ROTL((x),23)) 
+
+	for(j = 16; j < 68; j++ )
+	{
+		Temp1 = W[j-16] ^ W[j-9];
+		Temp2 = ROTL(W[j-3],15);
+		Temp3 = Temp1 ^ Temp2;
+		Temp4 = P1(Temp3);
+		Temp5 =  ROTL(W[j - 13],7 ) ^ W[j-6];
+		W[j] = Temp4 ^ Temp5;
+	}
+#ifdef TEST_PRINT
+	printf("Expanding message W0-67:\n");
+	for(i=0; i<68; i++)
+	{
+		printf("%08x ",W[i]);
+		if(((i+1) % 8) == 0) printf("\n");
+	}
+	printf("\n");
+#endif
+
+	for(j =  0; j < 64; j++)
+	{
+		W1[j] = W[j] ^ W[j+4];
+	}
+#ifdef TEST_PRINT
+	printf("Expanding message W'0-63:\n");
+	for(i=0; i<64; i++)
+	{
+		printf("%08x ",W1[i]);
+		if(((i+1) % 8) == 0) printf("\n");
+	}
+	printf("\n");
+#endif
+
+	A = ctx->state[0];
+	B = ctx->state[1];
+	C = ctx->state[2];
+	D = ctx->state[3];
+	E = ctx->state[4];
+	F = ctx->state[5];
+	G = ctx->state[6];
+	H = ctx->state[7];
+#ifdef TEST_PRINT
+	printf("j     A       B        C         D         E        F        G       H\n");
+	printf("   %08x %08x %08x %08x %08x %08x %08x %08x\n",A,B,C,D,E,F,G,H);
+#endif
+
+	for(j =0; j < 16; j++)
+	{
+		SS1 = ROTL((ROTL(A,12) + E + ROTL(T[j],j)), 7); 
+		SS2 = SS1 ^ ROTL(A,12);
+		TT1 = FF0(A,B,C) + D + SS2 + W1[j];
+		TT2 = GG0(E,F,G) + H + SS1 + W[j];
+		D = C;
+		C = ROTL(B,9);
+		B = A;
+		A = TT1;
+		H = G;
+		G = ROTL(F,19);
+		F = E;
+		E = P0(TT2);
+#ifdef TEST_PRINT
+		printf("%02d %08x %08x %08x %08x %08x %08x %08x %08x\n",j,A,B,C,D,E,F,G,H);
+#endif
+	}
+
+	for(j =16; j < 64; j++)
+	{
+		SS1 = ROTL((ROTL(A,12) + E + ROTL(T[j],j)), 7); 
+		SS2 = SS1 ^ ROTL(A,12);
+		TT1 = FF1(A,B,C) + D + SS2 + W1[j];
+		TT2 = GG1(E,F,G) + H + SS1 + W[j];
+		D = C;
+		C = ROTL(B,9);
+		B = A;
+		A = TT1;
+		H = G;
+		G = ROTL(F,19);
+		F = E;
+		E = P0(TT2);
+#ifdef TEST_PRINT 
+		printf("%02d %08x %08x %08x %08x %08x %08x %08x %08x\n",j,A,B,C,D,E,F,G,H);
+#endif	
+	}
+
+	ctx->state[0] ^= A;
+	ctx->state[1] ^= B;
+	ctx->state[2] ^= C;
+	ctx->state[3] ^= D;
+	ctx->state[4] ^= E;
+	ctx->state[5] ^= F;
+	ctx->state[6] ^= G;
+	ctx->state[7] ^= H;
+
+#ifdef TEST_PRINT 
+	printf("   %08x %08x %08x %08x %08x %08x %08x %08x\n",ctx->state[0],ctx->state[1],ctx->state[2],
+			ctx->state[3],ctx->state[4],ctx->state[5],ctx->state[6],ctx->state[7]);
+#endif
+}
+
+
+/*
+ *  * SM3 process buffer
+ *   */
+void sm3_soft_update( sm3_context *ctx, const unsigned char *input, int ilen )
+{
+	int fill;
+	unsigned int left;
+
+	if( ilen <= 0 )
+		return;
+
+#ifdef TEST_PRINT 
+	printf("test:%s, %d\n", input, ilen);
+#endif
+
+	left = ctx->total[0] & 0x3F;
+	fill = 64 - left;
+
+	ctx->total[0] += ilen;
+	ctx->total[0] &= 0xFFFFFFFF;
+
+	if( ctx->total[0] < (unsigned int) ilen )
+		ctx->total[1]++;
+
+	if( left && ilen >= fill )
+	{
+		memcpy( (void *) (ctx->buffer + left),
+				(void *) input, fill );
+		sm3_process( ctx, ctx->buffer );
+		input += fill;
+		ilen  -= fill;
+		left = 0;
+	}
+
+	while( ilen >= 64 )
+	{
+		sm3_process( ctx, input );
+		input += 64;
+		ilen  -= 64;
+	}
+
+	if( ilen > 0 )
+	{
+		memcpy( (void *) (ctx->buffer + left),
+				(void *) input, ilen );
+	}
+}
+
+static const unsigned char sm3_padding[64] =
+{
+	0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+};
+
+/*
+ *  * SM3 final digest
+ *   */
+void sm3_soft_final( sm3_context *ctx, unsigned char* output)
+{
+	unsigned int last, padn;
+	unsigned int high, low;
+	unsigned char msglen[8];
+
+	high = ( ctx->total[0] >> 29 )
+		| ( ctx->total[1] <<  3 );
+	low  = ( ctx->total[0] <<  3 );
+
+	PUT_ULONG_BE( high, msglen, 0 );
+	PUT_ULONG_BE( low,  msglen, 4 );
+
+	last = ctx->total[0] & 0x3F;
+	padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
+
+	sm3_soft_update( ctx, sm3_padding, padn );
+	sm3_soft_update( ctx, msglen, 8 );
+
+	PUT_ULONG_BE( ctx->state[0], output,  0 );
+	PUT_ULONG_BE( ctx->state[1], output,  4 );
+	PUT_ULONG_BE( ctx->state[2], output,  8 );
+	PUT_ULONG_BE( ctx->state[3], output, 12 );
+	PUT_ULONG_BE( ctx->state[4], output, 16 );
+	PUT_ULONG_BE( ctx->state[5], output, 20 );
+	PUT_ULONG_BE( ctx->state[6], output, 24 );
+	PUT_ULONG_BE( ctx->state[7], output, 28 );
+}
Index: include/openssl/sm3.h
===================================================================
--- include/openssl/sm3.h	(revision 0)
+++ include/openssl/sm3.h	(revision 0)
@@ -0,0 +1 @@
+link ../../crypto/sm3/sm3.h
\ No newline at end of file

Property changes on: include/openssl/sm3.h
___________________________________________________________________
Added: svn:special
   + *

